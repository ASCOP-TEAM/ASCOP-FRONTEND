import React, { useContext } from 'react';
import Head from 'next/head';
import { Carousel, Col, Container, Row } from 'react-bootstrap';
import Image from 'next/image';
import { Minus, Plus, ShoppingCart } from 'lucide-react';
import { useRouter } from 'next/router';
import type { NextPage } from 'next';

import { ProductData } from '@interfaces';
import { CartContext } from '@contexts';
import { Alert, Button, CartShop } from '@components';
import Layout from '@layout';
import { Section, SizesContainer, SizesVariables } from './styles';

const Producto: NextPage = () => {
  const router = useRouter();
  const { produto } = router.query;

  const [produtos, setProdutos] = React.useState<ProductData[]>([]);

  const [selectedSize, setSelectedSize] = React.useState<string | null>(null);
  const [quantity, setQuantity] = React.useState<number>(1);
  const [currentImage, setCurrentImage] = React.useState<string>('');

  const [isError, setError] = React.useState<boolean>(false);
  const [isSuccess, setSuccess] = React.useState<boolean>(false);

  const context = useContext(CartContext);

  const incrementQuantity = () => {
    setQuantity(quantity + 1);
  };

  const decrementQuantity = () => {
    if (quantity > 1) {
      setQuantity(quantity - 1);
    }
  };

  const handleAddToCart = () => {
    if (selectedSize == null) {
      setError(true);
      return false;
    } else {
      produtos.map((produto) => {
        context?.addToCart({
          item: produto,
          price: produto.attributes.price,
          quantity: quantity,
          size: selectedSize,
        });
      });

      setQuantity(1);
      setSelectedSize(null);
      setSuccess(true);
      return true;
    }
  };

  const handleRedirect = () => {
    const addCart = handleAddToCart();

    if (addCart) {
      return router.push('/loja/cliente/carrinho');
    }
  };

  const handleThumbnailHover = (imageurl: string) => {
    setCurrentImage(imageurl);
  };

  React.useEffect(() => {
    if (typeof produto == 'string') {
      const parsedProduct = JSON.parse(produto);
      setProdutos([parsedProduct]);
    }
  }, [produto]);

  return (
    <>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Layout bgColor="white" txColor="black" staticmenu>
        <Container>
          <Section>
            {/*  barra superior  */}
            <Row className="bar">
              <Col className="voltar">
                <button onClick={() => router.push('/loja')}>Voltar</button>
              </Col>
              <CartShop />
            </Row>

            <div className="product">
              <Row className="flex-row my-4 justify-content-around">
                {produtos &&
                  produtos.map((produto) => {
                    return (
                      <>
                        <Col className="product-imgens d-flex" xs={12} lg={6}>
                          <Col
                            className="galery  d-none d-lg-block"
                            xs={'auto'}
                          >
                            <ul className="d-flex flex-column align-items-center ">
                              {produto.attributes.gallery.data &&
                                produto.attributes.gallery.data.map((image) => (
                                  <li
                                    key={image.id}
                                    onMouseEnter={() =>
                                      handleThumbnailHover(image.attributes.url)
                                    }
                                    onClick={() =>
                                      handleThumbnailHover(image.attributes.url)
                                    }
                                    onMouseLeave={() =>
                                      setCurrentImage(
                                        produto.attributes.thumbnail.data
                                          .attributes.url,
                                      )
                                    }
                                  >
                                    <Image
                                      width={50}
                                      height={50}
                                      src={image.attributes.url}
                                      alt={'foto:' + image.attributes.name}
                                    />
                                  </li>
                                ))}
                            </ul>
                          </Col>
                          <Col
                            className="thumbnail d-none  d-lg-flex justify-content-center align-items-center "
                            xs={12}
                          >
                            <Image
                              width={350}
                              height={350}
                              src={
                                currentImage
                                  ? currentImage
                                  : produto.attributes.thumbnail.data.attributes
                                      .url
                              }
                              alt={'foto:' + produto.attributes.title}
                            />
                          </Col>

                          {/* mobile view slider */}

                          <Col
                            xs={12}
                            className="d-flex justify-content-center align-items-center d-lg-none"
                          >
                            <Carousel data-bs-theme="dark">
                              {produto.attributes.gallery.data &&
                                produto.attributes.gallery.data.map((image) => (
                                  <Carousel.Item key={image.id}>
                                    <Image
                                      width={350}
                                      height={350}
                                      src={image.attributes.url}
                                      alt={'foto:' + image.attributes.name}
                                    />
                                  </Carousel.Item>
                                ))}
                            </Carousel>
                          </Col>
                        </Col>

                        <Col
                          className="prodoct-infos d-flex flex-column"
                          xs={12}
                          lg={5}
                        >
                          <div className="category">
                            <ul className="d-flex">
                              <li>
                                <p> Produtos </p>
                              </li>
                              <li>
                                <p>{'>'}</p>
                              </li>
                              {produto.attributes.categoria.data != null && (
                                <li>
                                  <p>
                                    {
                                      produto.attributes.categoria.data
                                        .attributes.name
                                    }
                                  </p>
                                </li>
                              )}
                            </ul>
                          </div>
                          <div className="title d-flex align-items-center justify-content-between my-2">
                            <h1>{produto.attributes.title}</h1>
                          </div>
                          <div className="price">
                            <h2>R${produto.attributes.price}</h2>
                          </div>
                          <div className="description">
                            <p className="title">Descrição do produto:</p>
                            <p className="description-content">
                              {produto.attributes.description}
                            </p>
                          </div>
                          <SizesContainer>
                            <div className="label">
                              <h4>Tamanhos: </h4>
                            </div>
                            <ul className={`my-2 `}>
                              {produto.attributes.sizes.map((variables) => (
                                <SizesVariables
                                  key={variables.id}
                                  onClick={() =>
                                    setSelectedSize(variables.variations)
                                  }
                                  isErro={isError}
                                  isSelect={
                                    selectedSize === variables.variations
                                  }
                                >
                                  <p>
                                    <strong>{variables.variations}</strong>
                                  </p>
                                </SizesVariables>
                              ))}
                            </ul>
                          </SizesContainer>

                          <div className="quatity my-3 d-flex flex-column">
                            <div>
                              <h4>Quantidade:</h4>
                            </div>

                            <div className="action-product d-flex justify-content-between align-items-center">
                              <button onClick={decrementQuantity}>
                                <Minus />
                              </button>
                              <div>
                                <h3>{quantity}</h3>
                              </div>
                              <button onClick={incrementQuantity}>
                                <Plus />
                              </button>
                            </div>
                          </div>
                          <Row className="buttons ">
                            <Col xs={12} lg={'auto'}>
                              <Button
                                className="mb-3 w-100"
                                text="COMPRAR"
                                theme={false}
                                onClick={handleRedirect}
                                disabled={isError}
                              />
                            </Col>
                            <Col xs={12} lg={'auto'}>
                              <Button
                                className="d-flex w-100 justify-content-center align-items-center gap-2 pb-2"
                                text="ADICIONAR "
                                theme={false}
                                onClick={handleAddToCart}
                                disabled={isError}
                                icon={ShoppingCart}
                              />
                            </Col>
                          </Row>
                        </Col>
                      </>
                    );
                  })}
              </Row>
            </div>

            {!produtos.length && <p>produto não encontrado</p>}

            {isError && (
              <Alert
                message="tamanho não selecionado!"
                show={isError}
                type="error"
                onClose={() => setError(false)}
              />
            )}

            {isSuccess && (
              <Alert
                message="Produto adicionado ao carrinho com sucesso!"
                show={isSuccess}
                type="success"
                onClose={() => setSuccess(false)}
              />
            )}
          </Section>
        </Container>
      </Layout>
    </>
  );
};

export default Producto;
